{
    "sourceFile": "src/utils/axios.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1703409985324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703409991623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+/*\r\n+ * @Author: STATICHIT\r\n+ * @Date: 2023-04-26 19:13:07\r\n+ * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n+ * @LastEditTime: 2023-12-10 21:25:52\r\n+ * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n+ * @Description: 封装请求\r\n+ */\r\n+\r\n+import axios from 'axios'\r\n+import qs from 'qs';\r\n+import router from '../router/index'\r\n+import{ user}\r\n+\r\n+let baseURL = 'http://192.168.50.173:8080/'\r\n+\r\n+let config = {\r\n+  baseURL: baseURL,\r\n+  timeout: 300000    //设置最大请求时间\r\n+}\r\n+\r\n+const _axios = axios.create(config);\r\n+\r\n+// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n+\r\n+// _axios.interceptors.response.use(res => {\r\n+//   if (typeof res.data !== 'object') {\r\n+//     ElMessage.error('服务端异常！')\r\n+//     return Promise.reject(res)\r\n+//   }\r\n+//   if (res.data.code != 200) {\r\n+//     console.log(res.data);\r\n+//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n+//     if (res.data.resultCode == 419) {\r\n+//       router.push({ path: '/login' })\r\n+//     }\r\n+//     return Promise.reject(res.data)\r\n+//   }\r\n+//   return res.data//返回的是数据\r\n+// })\r\n+\r\n+\r\n+\r\n+const header = {\r\n+  'Content-Type': 'application/json;charset=UTF-8',\r\n+  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n+}\r\n+\r\n+const http = {\r\n+  get(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        params,\r\n+        headers: header,\r\n+        method: 'GET'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res\r\n+      }).catch(err => {\r\n+        reject(err)\r\n+      })\r\n+    })\r\n+  },\r\n+  post(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'POST'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  put(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'PUT'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  delete(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'DELETE'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  }\r\n+}\r\n+export default http\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703409997596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+/*\r\n+ * @Author: STATICHIT\r\n+ * @Date: 2023-04-26 19:13:07\r\n+ * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n+ * @LastEditTime: 2023-12-10 21:25:52\r\n+ * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n+ * @Description: 封装请求\r\n+ */\r\n+\r\n+import axios from 'axios'\r\n+import qs from 'qs';\r\n+import router from '../router/index'\r\n+import{ user } from '.'\r\n+\r\n+let baseURL = 'http://192.168.50.173:8080/'\r\n+\r\n+let config = {\r\n+  baseURL: baseURL,\r\n+  timeout: 300000    //设置最大请求时间\r\n+}\r\n+\r\n+const _axios = axios.create(config);\r\n+\r\n+// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n+\r\n+// _axios.interceptors.response.use(res => {\r\n+//   if (typeof res.data !== 'object') {\r\n+//     ElMessage.error('服务端异常！')\r\n+//     return Promise.reject(res)\r\n+//   }\r\n+//   if (res.data.code != 200) {\r\n+//     console.log(res.data);\r\n+//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n+//     if (res.data.resultCode == 419) {\r\n+//       router.push({ path: '/login' })\r\n+//     }\r\n+//     return Promise.reject(res.data)\r\n+//   }\r\n+//   return res.data//返回的是数据\r\n+// })\r\n+\r\n+\r\n+\r\n+const header = {\r\n+  'Content-Type': 'application/json;charset=UTF-8',\r\n+  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n+}\r\n+\r\n+const http = {\r\n+  get(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        params,\r\n+        headers: header,\r\n+        method: 'GET'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res\r\n+      }).catch(err => {\r\n+        reject(err)\r\n+      })\r\n+    })\r\n+  },\r\n+  post(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'POST'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  put(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'PUT'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  delete(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'DELETE'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  }\r\n+}\r\n+export default http\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703410004307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n import axios from 'axios'\r\n import qs from 'qs';\r\n import router from '../router/index'\r\n-import{ user } from '.'\r\n+import{ user } from './'\r\n \r\n let baseURL = 'http://192.168.50.173:8080/'\r\n \r\n let config = {\r\n@@ -107,227 +107,5 @@\n       })\r\n     })\r\n   }\r\n }\r\n-export default http\n-/*\r\n- * @Author: STATICHIT\r\n- * @Date: 2023-04-26 19:13:07\r\n- * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n- * @LastEditTime: 2023-12-10 21:25:52\r\n- * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n- * @Description: 封装请求\r\n- */\r\n-\r\n-import axios from 'axios'\r\n-import qs from 'qs';\r\n-import router from '../router/index'\r\n-import{ user}\r\n-\r\n-let baseURL = 'http://192.168.50.173:8080/'\r\n-\r\n-let config = {\r\n-  baseURL: baseURL,\r\n-  timeout: 300000    //设置最大请求时间\r\n-}\r\n-\r\n-const _axios = axios.create(config);\r\n-\r\n-// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n-\r\n-// _axios.interceptors.response.use(res => {\r\n-//   if (typeof res.data !== 'object') {\r\n-//     ElMessage.error('服务端异常！')\r\n-//     return Promise.reject(res)\r\n-//   }\r\n-//   if (res.data.code != 200) {\r\n-//     console.log(res.data);\r\n-//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n-//     if (res.data.resultCode == 419) {\r\n-//       router.push({ path: '/login' })\r\n-//     }\r\n-//     return Promise.reject(res.data)\r\n-//   }\r\n-//   return res.data//返回的是数据\r\n-// })\r\n-\r\n-\r\n-\r\n-const header = {\r\n-  'Content-Type': 'application/json;charset=UTF-8',\r\n-  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n-}\r\n-\r\n-const http = {\r\n-  get(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        params,\r\n-        headers: header,\r\n-        method: 'GET'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res\r\n-      }).catch(err => {\r\n-        reject(err)\r\n-      })\r\n-    })\r\n-  },\r\n-  post(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'POST'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  put(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'PUT'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  delete(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'DELETE'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  }\r\n-}\r\n-export default http\n-/*\r\n- * @Author: STATICHIT\r\n- * @Date: 2023-04-26 19:13:07\r\n- * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n- * @LastEditTime: 2023-12-10 21:25:52\r\n- * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n- * @Description: 封装请求\r\n- */\r\n-\r\n-import axios from 'axios'\r\n-import qs from 'qs';\r\n-import router from '../router/index'\r\n-im\r\n-\r\n-let baseURL = 'http://192.168.50.173:8080/'\r\n-\r\n-let config = {\r\n-  baseURL: baseURL,\r\n-  timeout: 300000    //设置最大请求时间\r\n-}\r\n-\r\n-const _axios = axios.create(config);\r\n-\r\n-// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n-\r\n-// _axios.interceptors.response.use(res => {\r\n-//   if (typeof res.data !== 'object') {\r\n-//     ElMessage.error('服务端异常！')\r\n-//     return Promise.reject(res)\r\n-//   }\r\n-//   if (res.data.code != 200) {\r\n-//     console.log(res.data);\r\n-//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n-//     if (res.data.resultCode == 419) {\r\n-//       router.push({ path: '/login' })\r\n-//     }\r\n-//     return Promise.reject(res.data)\r\n-//   }\r\n-//   return res.data//返回的是数据\r\n-// })\r\n-\r\n-\r\n-\r\n-const header = {\r\n-  'Content-Type': 'application/json;charset=UTF-8',\r\n-  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n-}\r\n-\r\n-const http = {\r\n-  get(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        params,\r\n-        headers: header,\r\n-        method: 'GET'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res\r\n-      }).catch(err => {\r\n-        reject(err)\r\n-      })\r\n-    })\r\n-  },\r\n-  post(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'POST'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  put(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'PUT'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  delete(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'DELETE'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  }\r\n-}\r\n export default http\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703410012067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n import axios from 'axios'\r\n import qs from 'qs';\r\n import router from '../router/index'\r\n-import{ user } from './'\r\n+import{ user } from '../'\r\n \r\n let baseURL = 'http://192.168.50.173:8080/'\r\n \r\n let config = {\r\n"
                },
                {
                    "date": 1703410017387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+/*\r\n+ * @Author: STATICHIT\r\n+ * @Date: 2023-04-26 19:13:07\r\n+ * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n+ * @LastEditTime: 2023-12-10 21:25:52\r\n+ * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n+ * @Description: 封装请求\r\n+ */\r\n+\r\n+import axios from 'axios'\r\n+import qs from 'qs';\r\n+import router from '../router/index'\r\n+import{ user } from '../store/'\r\n+\r\n+let baseURL = 'http://192.168.50.173:8080/'\r\n+\r\n+let config = {\r\n+  baseURL: baseURL,\r\n+  timeout: 300000    //设置最大请求时间\r\n+}\r\n+\r\n+const _axios = axios.create(config);\r\n+\r\n+// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n+\r\n+// _axios.interceptors.response.use(res => {\r\n+//   if (typeof res.data !== 'object') {\r\n+//     ElMessage.error('服务端异常！')\r\n+//     return Promise.reject(res)\r\n+//   }\r\n+//   if (res.data.code != 200) {\r\n+//     console.log(res.data);\r\n+//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n+//     if (res.data.resultCode == 419) {\r\n+//       router.push({ path: '/login' })\r\n+//     }\r\n+//     return Promise.reject(res.data)\r\n+//   }\r\n+//   return res.data//返回的是数据\r\n+// })\r\n+\r\n+\r\n+\r\n+const header = {\r\n+  'Content-Type': 'application/json;charset=UTF-8',\r\n+  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n+}\r\n+\r\n+const http = {\r\n+  get(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        params,\r\n+        headers: header,\r\n+        method: 'GET'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res\r\n+      }).catch(err => {\r\n+        reject(err)\r\n+      })\r\n+    })\r\n+  },\r\n+  post(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'POST'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  put(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'PUT'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  delete(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'DELETE'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  }\r\n+}\r\n+export default http\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703410034417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n import axios from 'axios'\r\n import qs from 'qs';\r\n import router from '../router/index'\r\n-import{ user } from '../store/'\r\n+import{ user } from '../store/user'\r\n \r\n let baseURL = 'http://192.168.50.173:8080/'\r\n \r\n let config = {\r\n@@ -38,10 +38,10 @@\n //   }\r\n //   return res.data//返回的是数据\r\n // })\r\n \r\n+let store = \r\n \r\n-\r\n const header = {\r\n   'Content-Type': 'application/json;charset=UTF-8',\r\n   'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n }\r\n@@ -107,116 +107,5 @@\n       })\r\n     })\r\n   }\r\n }\r\n-export default http\n-/*\r\n- * @Author: STATICHIT\r\n- * @Date: 2023-04-26 19:13:07\r\n- * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n- * @LastEditTime: 2023-12-10 21:25:52\r\n- * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n- * @Description: 封装请求\r\n- */\r\n-\r\n-import axios from 'axios'\r\n-import qs from 'qs';\r\n-import router from '../router/index'\r\n-import{ user } from '../'\r\n-\r\n-let baseURL = 'http://192.168.50.173:8080/'\r\n-\r\n-let config = {\r\n-  baseURL: baseURL,\r\n-  timeout: 300000    //设置最大请求时间\r\n-}\r\n-\r\n-const _axios = axios.create(config);\r\n-\r\n-// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n-\r\n-// _axios.interceptors.response.use(res => {\r\n-//   if (typeof res.data !== 'object') {\r\n-//     ElMessage.error('服务端异常！')\r\n-//     return Promise.reject(res)\r\n-//   }\r\n-//   if (res.data.code != 200) {\r\n-//     console.log(res.data);\r\n-//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n-//     if (res.data.resultCode == 419) {\r\n-//       router.push({ path: '/login' })\r\n-//     }\r\n-//     return Promise.reject(res.data)\r\n-//   }\r\n-//   return res.data//返回的是数据\r\n-// })\r\n-\r\n-\r\n-\r\n-const header = {\r\n-  'Content-Type': 'application/json;charset=UTF-8',\r\n-  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n-}\r\n-\r\n-const http = {\r\n-  get(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        params,\r\n-        headers: header,\r\n-        method: 'GET'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res\r\n-      }).catch(err => {\r\n-        reject(err)\r\n-      })\r\n-    })\r\n-  },\r\n-  post(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'POST'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  put(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'PUT'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  },\r\n-  delete(url = '', params = {}) {\r\n-    return new Promise((resolve, reject) => {\r\n-      _axios({\r\n-        url,\r\n-        data: qs.parse(params),\r\n-        headers: header,\r\n-        method: 'DELETE'\r\n-      }).then(res => {\r\n-        resolve(res.data)\r\n-        return res.data\r\n-      }).catch(error => {\r\n-        reject(error)\r\n-      })\r\n-    })\r\n-  }\r\n-}\r\n export default http\n\\ No newline at end of file\n"
                },
                {
                    "date": 1703410067301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,13 @@\n //   }\r\n //   return res.data//返回的是数据\r\n // })\r\n \r\n-let store = \r\n+let store = user();\r\n \r\n const header = {\r\n   'Content-Type': 'application/json;charset=UTF-8',\r\n-  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n+  'accessToken': st,\r\n }\r\n \r\n const http = {\r\n   get(url = '', params = {}) {\r\n"
                },
                {
                    "date": 1703410072448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n let store = user();\r\n \r\n const header = {\r\n   'Content-Type': 'application/json;charset=UTF-8',\r\n-  'accessToken': st,\r\n+  'accessToken': store.token,\r\n }\r\n \r\n const http = {\r\n   get(url = '', params = {}) {\r\n"
                },
                {
                    "date": 1703410134461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n \r\n const header = {\r\n   'Content-Type': 'application/json;charset=UTF-8',\r\n   'accessToken': store.token,\r\n+  ''\r\n }\r\n \r\n const http = {\r\n   get(url = '', params = {}) {\r\n"
                },
                {
                    "date": 1703410142559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \r\n const header = {\r\n   'Content-Type': 'application/json;charset=UTF-8',\r\n   'accessToken': store.token,\r\n-  'Autho'\r\n+  'Authorization'\r\n }\r\n \r\n const http = {\r\n   get(url = '', params = {}) {\r\n"
                },
                {
                    "date": 1703410178554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+/*\r\n+ * @Author: STATICHIT\r\n+ * @Date: 2023-04-26 19:13:07\r\n+ * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n+ * @LastEditTime: 2023-12-10 21:25:52\r\n+ * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n+ * @Description: 封装请求\r\n+ */\r\n+\r\n+import axios from 'axios'\r\n+import qs from 'qs';\r\n+import router from '../router/index'\r\n+import{ user } from '../store/user'\r\n+\r\n+let baseURL = 'http://192.168.50.173:8080/'\r\n+\r\n+let config = {\r\n+  baseURL: baseURL,\r\n+  timeout: 300000    //设置最大请求时间\r\n+}\r\n+\r\n+const _axios = axios.create(config);\r\n+\r\n+// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n+\r\n+// _axios.interceptors.response.use(res => {\r\n+//   if (typeof res.data !== 'object') {\r\n+//     ElMessage.error('服务端异常！')\r\n+//     return Promise.reject(res)\r\n+//   }\r\n+//   if (res.data.code != 200) {\r\n+//     console.log(res.data);\r\n+//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n+//     if (res.data.resultCode == 419) {\r\n+//       router.push({ path: '/login' })\r\n+//     }\r\n+//     return Promise.reject(res.data)\r\n+//   }\r\n+//   return res.data//返回的是数据\r\n+// })\r\n+\r\n+let store = user();\r\n+\r\n+const header = {\r\n+  'Content-Type': 'application/json;charset=UTF-8',\r\n+  'accessToken': store.token,\r\n+  'Authorization':`Bearer ${store.token}`\r\n+}\r\n+\r\n+const http = {\r\n+  get(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        params,\r\n+        headers: header,\r\n+        method: 'GET'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res\r\n+      }).catch(err => {\r\n+        reject(err)\r\n+      })\r\n+    })\r\n+  },\r\n+  post(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'POST'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  put(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'PUT'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  },\r\n+  delete(url = '', params = {}) {\r\n+    return new Promise((resolve, reject) => {\r\n+      _axios({\r\n+        url,\r\n+        data: qs.parse(params),\r\n+        headers: header,\r\n+        method: 'DELETE'\r\n+      }).then(res => {\r\n+        resolve(res.data)\r\n+        return res.data\r\n+      }).catch(error => {\r\n+        reject(error)\r\n+      })\r\n+    })\r\n+  }\r\n+}\r\n+export default http\n\\ No newline at end of file\n"
                }
            ],
            "date": 1703409985324,
            "name": "Commit-0",
            "content": "/*\r\n * @Author: STATICHIT\r\n * @Date: 2023-04-26 19:13:07\r\n * @LastEditors: error: error: git config user.name & please set dead value or install git && error: git config user.email & please set dead value or install git & please set dead value or install git\r\n * @LastEditTime: 2023-12-10 21:25:52\r\n * @FilePath: \\resume_analysis\\src\\utils\\axios.js\r\n * @Description: 封装请求\r\n */\r\n\r\nimport axios from 'axios'\r\nimport qs from 'qs';\r\nimport router from '../router/index'\r\nim\r\n\r\nlet baseURL = 'http://192.168.50.173:8080/'\r\n\r\nlet config = {\r\n  baseURL: baseURL,\r\n  timeout: 300000    //设置最大请求时间\r\n}\r\n\r\nconst _axios = axios.create(config);\r\n\r\n// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n\r\n// _axios.interceptors.response.use(res => {\r\n//   if (typeof res.data !== 'object') {\r\n//     ElMessage.error('服务端异常！')\r\n//     return Promise.reject(res)\r\n//   }\r\n//   if (res.data.code != 200) {\r\n//     console.log(res.data);\r\n//     if (res.data.msg) ElMessage.error(res.data.msg)\r\n//     if (res.data.resultCode == 419) {\r\n//       router.push({ path: '/login' })\r\n//     }\r\n//     return Promise.reject(res.data)\r\n//   }\r\n//   return res.data//返回的是数据\r\n// })\r\n\r\n\r\n\r\nconst header = {\r\n  'Content-Type': 'application/json;charset=UTF-8',\r\n  'accessToken':'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJpZGVudGl0eSI6IkhSIiwiaWQiOiIxIiwiZXhwIjoxNzA5NTk1MTQzfQ.vUXTwTW7PxQlpQyv_RporMDZO2-XMekQlDSPel444VM',\r\n}\r\n\r\nconst http = {\r\n  get(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        params,\r\n        headers: header,\r\n        method: 'GET'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res\r\n      }).catch(err => {\r\n        reject(err)\r\n      })\r\n    })\r\n  },\r\n  post(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'POST'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  },\r\n  put(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'PUT'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  },\r\n  delete(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'DELETE'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  }\r\n}\r\nexport default http"
        }
    ]
}